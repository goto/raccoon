// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: .temp/odpf/raccoon/v1beta1/raccoon.proto

package com.gotocompany.proton.raccoon;

/**
 * <pre>
 * `EventRequest` defines the contract to push events to Raccoon
 * An `EventRequest` allows you to push more than one events(batch). The events
 * are wrapped inside `events` repeated field. All of the fields on `EventRequest`
 * are required.
 * </pre>
 *
 * Protobuf type {@code odpf.raccoon.v1beta1.SendEventRequest}
 */
public final class SendEventRequest extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:odpf.raccoon.v1beta1.SendEventRequest)
    SendEventRequestOrBuilder {
private static final long serialVersionUID = 0L;
  // Use SendEventRequest.newBuilder() to construct.
  private SendEventRequest(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private SendEventRequest() {
    reqGuid_ = "";
    events_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new SendEventRequest();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private SendEventRequest(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            java.lang.String s = input.readStringRequireUtf8();

            reqGuid_ = s;
            break;
          }
          case 18: {
            com.google.protobuf.Timestamp.Builder subBuilder = null;
            if (sentTime_ != null) {
              subBuilder = sentTime_.toBuilder();
            }
            sentTime_ = input.readMessage(com.google.protobuf.Timestamp.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(sentTime_);
              sentTime_ = subBuilder.buildPartial();
            }

            break;
          }
          case 26: {
            if (!((mutable_bitField0_ & 0x00000001) != 0)) {
              events_ = new java.util.ArrayList<Event>();
              mutable_bitField0_ |= 0x00000001;
            }
            events_.add(
                input.readMessage(Event.parser(), extensionRegistry));
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000001) != 0)) {
        events_ = java.util.Collections.unmodifiableList(events_);
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return EventProto.internal_static_odpf_raccoon_v1beta1_SendEventRequest_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return EventProto.internal_static_odpf_raccoon_v1beta1_SendEventRequest_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            SendEventRequest.class, SendEventRequest.Builder.class);
  }

  public static final int REQ_GUID_FIELD_NUMBER = 1;
  private volatile java.lang.Object reqGuid_;
  /**
   * <pre>
   * `req_guid` is unique identifier of the request the client is making.
   * Raccoon uses the identifier to send response of the request. The client can handle the
   * response accordingly. For example, the client can retry the request in case the response is
   * giving `INTERNAL_ERROR` code with "publisher failed" reason.
   * This identifier is necessary because on event-based protocols like WebSocket the response is
   * returned asynchronously. If there is no identifier, no way the client can tell which response
   * belongs to which request.
   * Apart from sending response, `req_guid` is used to log some informations on 'debug' level. You can search the 
   * debug logs with `ReqGUID` keyword.
   * </pre>
   *
   * <code>string req_guid = 1 [json_name = "reqGuid"];</code>
   * @return The reqGuid.
   */
  @java.lang.Override
  public java.lang.String getReqGuid() {
    java.lang.Object ref = reqGuid_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      reqGuid_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * `req_guid` is unique identifier of the request the client is making.
   * Raccoon uses the identifier to send response of the request. The client can handle the
   * response accordingly. For example, the client can retry the request in case the response is
   * giving `INTERNAL_ERROR` code with "publisher failed" reason.
   * This identifier is necessary because on event-based protocols like WebSocket the response is
   * returned asynchronously. If there is no identifier, no way the client can tell which response
   * belongs to which request.
   * Apart from sending response, `req_guid` is used to log some informations on 'debug' level. You can search the 
   * debug logs with `ReqGUID` keyword.
   * </pre>
   *
   * <code>string req_guid = 1 [json_name = "reqGuid"];</code>
   * @return The bytes for reqGuid.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getReqGuidBytes() {
    java.lang.Object ref = reqGuid_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      reqGuid_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int SENT_TIME_FIELD_NUMBER = 2;
  private com.google.protobuf.Timestamp sentTime_;
  /**
   * <pre>
   * `sent_time` defines the time the request is sent.
   * `sent_time` is used to calculate various metrics. The main metric uses `sent_time` is duration from the
   * request is sent until the events are published.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp sent_time = 2 [json_name = "sentTime"];</code>
   * @return Whether the sentTime field is set.
   */
  @java.lang.Override
  public boolean hasSentTime() {
    return sentTime_ != null;
  }
  /**
   * <pre>
   * `sent_time` defines the time the request is sent.
   * `sent_time` is used to calculate various metrics. The main metric uses `sent_time` is duration from the
   * request is sent until the events are published.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp sent_time = 2 [json_name = "sentTime"];</code>
   * @return The sentTime.
   */
  @java.lang.Override
  public com.google.protobuf.Timestamp getSentTime() {
    return sentTime_ == null ? com.google.protobuf.Timestamp.getDefaultInstance() : sentTime_;
  }
  /**
   * <pre>
   * `sent_time` defines the time the request is sent.
   * `sent_time` is used to calculate various metrics. The main metric uses `sent_time` is duration from the
   * request is sent until the events are published.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp sent_time = 2 [json_name = "sentTime"];</code>
   */
  @java.lang.Override
  public com.google.protobuf.TimestampOrBuilder getSentTimeOrBuilder() {
    return getSentTime();
  }

  public static final int EVENTS_FIELD_NUMBER = 3;
  private java.util.List<Event> events_;
  /**
   * <pre>
   * `events` is where the client put all the events wrapped in `Event`.
   * As mentioned above, the request allows the client to push more than one event. Normally you want to batch
   * the events to optimize the network call. 
   * </pre>
   *
   * <code>repeated .odpf.raccoon.v1beta1.Event events = 3 [json_name = "events"];</code>
   */
  @java.lang.Override
  public java.util.List<Event> getEventsList() {
    return events_;
  }
  /**
   * <pre>
   * `events` is where the client put all the events wrapped in `Event`.
   * As mentioned above, the request allows the client to push more than one event. Normally you want to batch
   * the events to optimize the network call. 
   * </pre>
   *
   * <code>repeated .odpf.raccoon.v1beta1.Event events = 3 [json_name = "events"];</code>
   */
  @java.lang.Override
  public java.util.List<? extends EventOrBuilder>
      getEventsOrBuilderList() {
    return events_;
  }
  /**
   * <pre>
   * `events` is where the client put all the events wrapped in `Event`.
   * As mentioned above, the request allows the client to push more than one event. Normally you want to batch
   * the events to optimize the network call. 
   * </pre>
   *
   * <code>repeated .odpf.raccoon.v1beta1.Event events = 3 [json_name = "events"];</code>
   */
  @java.lang.Override
  public int getEventsCount() {
    return events_.size();
  }
  /**
   * <pre>
   * `events` is where the client put all the events wrapped in `Event`.
   * As mentioned above, the request allows the client to push more than one event. Normally you want to batch
   * the events to optimize the network call. 
   * </pre>
   *
   * <code>repeated .odpf.raccoon.v1beta1.Event events = 3 [json_name = "events"];</code>
   */
  @java.lang.Override
  public Event getEvents(int index) {
    return events_.get(index);
  }
  /**
   * <pre>
   * `events` is where the client put all the events wrapped in `Event`.
   * As mentioned above, the request allows the client to push more than one event. Normally you want to batch
   * the events to optimize the network call. 
   * </pre>
   *
   * <code>repeated .odpf.raccoon.v1beta1.Event events = 3 [json_name = "events"];</code>
   */
  @java.lang.Override
  public EventOrBuilder getEventsOrBuilder(
      int index) {
    return events_.get(index);
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(reqGuid_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, reqGuid_);
    }
    if (sentTime_ != null) {
      output.writeMessage(2, getSentTime());
    }
    for (int i = 0; i < events_.size(); i++) {
      output.writeMessage(3, events_.get(i));
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(reqGuid_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, reqGuid_);
    }
    if (sentTime_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, getSentTime());
    }
    for (int i = 0; i < events_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, events_.get(i));
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof SendEventRequest)) {
      return super.equals(obj);
    }
    SendEventRequest other = (SendEventRequest) obj;

    if (!getReqGuid()
        .equals(other.getReqGuid())) return false;
    if (hasSentTime() != other.hasSentTime()) return false;
    if (hasSentTime()) {
      if (!getSentTime()
          .equals(other.getSentTime())) return false;
    }
    if (!getEventsList()
        .equals(other.getEventsList())) return false;
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + REQ_GUID_FIELD_NUMBER;
    hash = (53 * hash) + getReqGuid().hashCode();
    if (hasSentTime()) {
      hash = (37 * hash) + SENT_TIME_FIELD_NUMBER;
      hash = (53 * hash) + getSentTime().hashCode();
    }
    if (getEventsCount() > 0) {
      hash = (37 * hash) + EVENTS_FIELD_NUMBER;
      hash = (53 * hash) + getEventsList().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static SendEventRequest parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static SendEventRequest parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static SendEventRequest parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static SendEventRequest parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static SendEventRequest parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static SendEventRequest parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static SendEventRequest parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static SendEventRequest parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static SendEventRequest parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static SendEventRequest parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static SendEventRequest parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static SendEventRequest parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(SendEventRequest prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * `EventRequest` defines the contract to push events to Raccoon
   * An `EventRequest` allows you to push more than one events(batch). The events
   * are wrapped inside `events` repeated field. All of the fields on `EventRequest`
   * are required.
   * </pre>
   *
   * Protobuf type {@code odpf.raccoon.v1beta1.SendEventRequest}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:odpf.raccoon.v1beta1.SendEventRequest)
          SendEventRequestOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return EventProto.internal_static_odpf_raccoon_v1beta1_SendEventRequest_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return EventProto.internal_static_odpf_raccoon_v1beta1_SendEventRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              SendEventRequest.class, SendEventRequest.Builder.class);
    }

    // Construct using io.odpf.proton.raccoon.SendEventRequest.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getEventsFieldBuilder();
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      reqGuid_ = "";

      if (sentTimeBuilder_ == null) {
        sentTime_ = null;
      } else {
        sentTime_ = null;
        sentTimeBuilder_ = null;
      }
      if (eventsBuilder_ == null) {
        events_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
      } else {
        eventsBuilder_.clear();
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return EventProto.internal_static_odpf_raccoon_v1beta1_SendEventRequest_descriptor;
    }

    @java.lang.Override
    public SendEventRequest getDefaultInstanceForType() {
      return SendEventRequest.getDefaultInstance();
    }

    @java.lang.Override
    public SendEventRequest build() {
      SendEventRequest result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public SendEventRequest buildPartial() {
      SendEventRequest result = new SendEventRequest(this);
      int from_bitField0_ = bitField0_;
      result.reqGuid_ = reqGuid_;
      if (sentTimeBuilder_ == null) {
        result.sentTime_ = sentTime_;
      } else {
        result.sentTime_ = sentTimeBuilder_.build();
      }
      if (eventsBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0)) {
          events_ = java.util.Collections.unmodifiableList(events_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.events_ = events_;
      } else {
        result.events_ = eventsBuilder_.build();
      }
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof SendEventRequest) {
        return mergeFrom((SendEventRequest)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(SendEventRequest other) {
      if (other == SendEventRequest.getDefaultInstance()) return this;
      if (!other.getReqGuid().isEmpty()) {
        reqGuid_ = other.reqGuid_;
        onChanged();
      }
      if (other.hasSentTime()) {
        mergeSentTime(other.getSentTime());
      }
      if (eventsBuilder_ == null) {
        if (!other.events_.isEmpty()) {
          if (events_.isEmpty()) {
            events_ = other.events_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureEventsIsMutable();
            events_.addAll(other.events_);
          }
          onChanged();
        }
      } else {
        if (!other.events_.isEmpty()) {
          if (eventsBuilder_.isEmpty()) {
            eventsBuilder_.dispose();
            eventsBuilder_ = null;
            events_ = other.events_;
            bitField0_ = (bitField0_ & ~0x00000001);
            eventsBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getEventsFieldBuilder() : null;
          } else {
            eventsBuilder_.addAllMessages(other.events_);
          }
        }
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      SendEventRequest parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (SendEventRequest) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private java.lang.Object reqGuid_ = "";
    /**
     * <pre>
     * `req_guid` is unique identifier of the request the client is making.
     * Raccoon uses the identifier to send response of the request. The client can handle the
     * response accordingly. For example, the client can retry the request in case the response is
     * giving `INTERNAL_ERROR` code with "publisher failed" reason.
     * This identifier is necessary because on event-based protocols like WebSocket the response is
     * returned asynchronously. If there is no identifier, no way the client can tell which response
     * belongs to which request.
     * Apart from sending response, `req_guid` is used to log some informations on 'debug' level. You can search the 
     * debug logs with `ReqGUID` keyword.
     * </pre>
     *
     * <code>string req_guid = 1 [json_name = "reqGuid"];</code>
     * @return The reqGuid.
     */
    public java.lang.String getReqGuid() {
      java.lang.Object ref = reqGuid_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        reqGuid_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * `req_guid` is unique identifier of the request the client is making.
     * Raccoon uses the identifier to send response of the request. The client can handle the
     * response accordingly. For example, the client can retry the request in case the response is
     * giving `INTERNAL_ERROR` code with "publisher failed" reason.
     * This identifier is necessary because on event-based protocols like WebSocket the response is
     * returned asynchronously. If there is no identifier, no way the client can tell which response
     * belongs to which request.
     * Apart from sending response, `req_guid` is used to log some informations on 'debug' level. You can search the 
     * debug logs with `ReqGUID` keyword.
     * </pre>
     *
     * <code>string req_guid = 1 [json_name = "reqGuid"];</code>
     * @return The bytes for reqGuid.
     */
    public com.google.protobuf.ByteString
        getReqGuidBytes() {
      java.lang.Object ref = reqGuid_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        reqGuid_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * `req_guid` is unique identifier of the request the client is making.
     * Raccoon uses the identifier to send response of the request. The client can handle the
     * response accordingly. For example, the client can retry the request in case the response is
     * giving `INTERNAL_ERROR` code with "publisher failed" reason.
     * This identifier is necessary because on event-based protocols like WebSocket the response is
     * returned asynchronously. If there is no identifier, no way the client can tell which response
     * belongs to which request.
     * Apart from sending response, `req_guid` is used to log some informations on 'debug' level. You can search the 
     * debug logs with `ReqGUID` keyword.
     * </pre>
     *
     * <code>string req_guid = 1 [json_name = "reqGuid"];</code>
     * @param value The reqGuid to set.
     * @return This builder for chaining.
     */
    public Builder setReqGuid(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      reqGuid_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * `req_guid` is unique identifier of the request the client is making.
     * Raccoon uses the identifier to send response of the request. The client can handle the
     * response accordingly. For example, the client can retry the request in case the response is
     * giving `INTERNAL_ERROR` code with "publisher failed" reason.
     * This identifier is necessary because on event-based protocols like WebSocket the response is
     * returned asynchronously. If there is no identifier, no way the client can tell which response
     * belongs to which request.
     * Apart from sending response, `req_guid` is used to log some informations on 'debug' level. You can search the 
     * debug logs with `ReqGUID` keyword.
     * </pre>
     *
     * <code>string req_guid = 1 [json_name = "reqGuid"];</code>
     * @return This builder for chaining.
     */
    public Builder clearReqGuid() {
      
      reqGuid_ = getDefaultInstance().getReqGuid();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * `req_guid` is unique identifier of the request the client is making.
     * Raccoon uses the identifier to send response of the request. The client can handle the
     * response accordingly. For example, the client can retry the request in case the response is
     * giving `INTERNAL_ERROR` code with "publisher failed" reason.
     * This identifier is necessary because on event-based protocols like WebSocket the response is
     * returned asynchronously. If there is no identifier, no way the client can tell which response
     * belongs to which request.
     * Apart from sending response, `req_guid` is used to log some informations on 'debug' level. You can search the 
     * debug logs with `ReqGUID` keyword.
     * </pre>
     *
     * <code>string req_guid = 1 [json_name = "reqGuid"];</code>
     * @param value The bytes for reqGuid to set.
     * @return This builder for chaining.
     */
    public Builder setReqGuidBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      reqGuid_ = value;
      onChanged();
      return this;
    }

    private com.google.protobuf.Timestamp sentTime_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Timestamp, com.google.protobuf.Timestamp.Builder, com.google.protobuf.TimestampOrBuilder> sentTimeBuilder_;
    /**
     * <pre>
     * `sent_time` defines the time the request is sent.
     * `sent_time` is used to calculate various metrics. The main metric uses `sent_time` is duration from the
     * request is sent until the events are published.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp sent_time = 2 [json_name = "sentTime"];</code>
     * @return Whether the sentTime field is set.
     */
    public boolean hasSentTime() {
      return sentTimeBuilder_ != null || sentTime_ != null;
    }
    /**
     * <pre>
     * `sent_time` defines the time the request is sent.
     * `sent_time` is used to calculate various metrics. The main metric uses `sent_time` is duration from the
     * request is sent until the events are published.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp sent_time = 2 [json_name = "sentTime"];</code>
     * @return The sentTime.
     */
    public com.google.protobuf.Timestamp getSentTime() {
      if (sentTimeBuilder_ == null) {
        return sentTime_ == null ? com.google.protobuf.Timestamp.getDefaultInstance() : sentTime_;
      } else {
        return sentTimeBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * `sent_time` defines the time the request is sent.
     * `sent_time` is used to calculate various metrics. The main metric uses `sent_time` is duration from the
     * request is sent until the events are published.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp sent_time = 2 [json_name = "sentTime"];</code>
     */
    public Builder setSentTime(com.google.protobuf.Timestamp value) {
      if (sentTimeBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        sentTime_ = value;
        onChanged();
      } else {
        sentTimeBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * `sent_time` defines the time the request is sent.
     * `sent_time` is used to calculate various metrics. The main metric uses `sent_time` is duration from the
     * request is sent until the events are published.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp sent_time = 2 [json_name = "sentTime"];</code>
     */
    public Builder setSentTime(
        com.google.protobuf.Timestamp.Builder builderForValue) {
      if (sentTimeBuilder_ == null) {
        sentTime_ = builderForValue.build();
        onChanged();
      } else {
        sentTimeBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * `sent_time` defines the time the request is sent.
     * `sent_time` is used to calculate various metrics. The main metric uses `sent_time` is duration from the
     * request is sent until the events are published.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp sent_time = 2 [json_name = "sentTime"];</code>
     */
    public Builder mergeSentTime(com.google.protobuf.Timestamp value) {
      if (sentTimeBuilder_ == null) {
        if (sentTime_ != null) {
          sentTime_ =
            com.google.protobuf.Timestamp.newBuilder(sentTime_).mergeFrom(value).buildPartial();
        } else {
          sentTime_ = value;
        }
        onChanged();
      } else {
        sentTimeBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * `sent_time` defines the time the request is sent.
     * `sent_time` is used to calculate various metrics. The main metric uses `sent_time` is duration from the
     * request is sent until the events are published.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp sent_time = 2 [json_name = "sentTime"];</code>
     */
    public Builder clearSentTime() {
      if (sentTimeBuilder_ == null) {
        sentTime_ = null;
        onChanged();
      } else {
        sentTime_ = null;
        sentTimeBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * `sent_time` defines the time the request is sent.
     * `sent_time` is used to calculate various metrics. The main metric uses `sent_time` is duration from the
     * request is sent until the events are published.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp sent_time = 2 [json_name = "sentTime"];</code>
     */
    public com.google.protobuf.Timestamp.Builder getSentTimeBuilder() {
      
      onChanged();
      return getSentTimeFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * `sent_time` defines the time the request is sent.
     * `sent_time` is used to calculate various metrics. The main metric uses `sent_time` is duration from the
     * request is sent until the events are published.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp sent_time = 2 [json_name = "sentTime"];</code>
     */
    public com.google.protobuf.TimestampOrBuilder getSentTimeOrBuilder() {
      if (sentTimeBuilder_ != null) {
        return sentTimeBuilder_.getMessageOrBuilder();
      } else {
        return sentTime_ == null ?
            com.google.protobuf.Timestamp.getDefaultInstance() : sentTime_;
      }
    }
    /**
     * <pre>
     * `sent_time` defines the time the request is sent.
     * `sent_time` is used to calculate various metrics. The main metric uses `sent_time` is duration from the
     * request is sent until the events are published.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp sent_time = 2 [json_name = "sentTime"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Timestamp, com.google.protobuf.Timestamp.Builder, com.google.protobuf.TimestampOrBuilder> 
        getSentTimeFieldBuilder() {
      if (sentTimeBuilder_ == null) {
        sentTimeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.Timestamp, com.google.protobuf.Timestamp.Builder, com.google.protobuf.TimestampOrBuilder>(
                getSentTime(),
                getParentForChildren(),
                isClean());
        sentTime_ = null;
      }
      return sentTimeBuilder_;
    }

    private java.util.List<Event> events_ =
      java.util.Collections.emptyList();
    private void ensureEventsIsMutable() {
      if (!((bitField0_ & 0x00000001) != 0)) {
        events_ = new java.util.ArrayList<Event>(events_);
        bitField0_ |= 0x00000001;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
            Event, Event.Builder, EventOrBuilder> eventsBuilder_;

    /**
     * <pre>
     * `events` is where the client put all the events wrapped in `Event`.
     * As mentioned above, the request allows the client to push more than one event. Normally you want to batch
     * the events to optimize the network call. 
     * </pre>
     *
     * <code>repeated .odpf.raccoon.v1beta1.Event events = 3 [json_name = "events"];</code>
     */
    public java.util.List<Event> getEventsList() {
      if (eventsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(events_);
      } else {
        return eventsBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * `events` is where the client put all the events wrapped in `Event`.
     * As mentioned above, the request allows the client to push more than one event. Normally you want to batch
     * the events to optimize the network call. 
     * </pre>
     *
     * <code>repeated .odpf.raccoon.v1beta1.Event events = 3 [json_name = "events"];</code>
     */
    public int getEventsCount() {
      if (eventsBuilder_ == null) {
        return events_.size();
      } else {
        return eventsBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * `events` is where the client put all the events wrapped in `Event`.
     * As mentioned above, the request allows the client to push more than one event. Normally you want to batch
     * the events to optimize the network call. 
     * </pre>
     *
     * <code>repeated .odpf.raccoon.v1beta1.Event events = 3 [json_name = "events"];</code>
     */
    public Event getEvents(int index) {
      if (eventsBuilder_ == null) {
        return events_.get(index);
      } else {
        return eventsBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * `events` is where the client put all the events wrapped in `Event`.
     * As mentioned above, the request allows the client to push more than one event. Normally you want to batch
     * the events to optimize the network call. 
     * </pre>
     *
     * <code>repeated .odpf.raccoon.v1beta1.Event events = 3 [json_name = "events"];</code>
     */
    public Builder setEvents(
        int index, Event value) {
      if (eventsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureEventsIsMutable();
        events_.set(index, value);
        onChanged();
      } else {
        eventsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * `events` is where the client put all the events wrapped in `Event`.
     * As mentioned above, the request allows the client to push more than one event. Normally you want to batch
     * the events to optimize the network call. 
     * </pre>
     *
     * <code>repeated .odpf.raccoon.v1beta1.Event events = 3 [json_name = "events"];</code>
     */
    public Builder setEvents(
        int index, Event.Builder builderForValue) {
      if (eventsBuilder_ == null) {
        ensureEventsIsMutable();
        events_.set(index, builderForValue.build());
        onChanged();
      } else {
        eventsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * `events` is where the client put all the events wrapped in `Event`.
     * As mentioned above, the request allows the client to push more than one event. Normally you want to batch
     * the events to optimize the network call. 
     * </pre>
     *
     * <code>repeated .odpf.raccoon.v1beta1.Event events = 3 [json_name = "events"];</code>
     */
    public Builder addEvents(Event value) {
      if (eventsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureEventsIsMutable();
        events_.add(value);
        onChanged();
      } else {
        eventsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * `events` is where the client put all the events wrapped in `Event`.
     * As mentioned above, the request allows the client to push more than one event. Normally you want to batch
     * the events to optimize the network call. 
     * </pre>
     *
     * <code>repeated .odpf.raccoon.v1beta1.Event events = 3 [json_name = "events"];</code>
     */
    public Builder addEvents(
        int index, Event value) {
      if (eventsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureEventsIsMutable();
        events_.add(index, value);
        onChanged();
      } else {
        eventsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * `events` is where the client put all the events wrapped in `Event`.
     * As mentioned above, the request allows the client to push more than one event. Normally you want to batch
     * the events to optimize the network call. 
     * </pre>
     *
     * <code>repeated .odpf.raccoon.v1beta1.Event events = 3 [json_name = "events"];</code>
     */
    public Builder addEvents(
        Event.Builder builderForValue) {
      if (eventsBuilder_ == null) {
        ensureEventsIsMutable();
        events_.add(builderForValue.build());
        onChanged();
      } else {
        eventsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * `events` is where the client put all the events wrapped in `Event`.
     * As mentioned above, the request allows the client to push more than one event. Normally you want to batch
     * the events to optimize the network call. 
     * </pre>
     *
     * <code>repeated .odpf.raccoon.v1beta1.Event events = 3 [json_name = "events"];</code>
     */
    public Builder addEvents(
        int index, Event.Builder builderForValue) {
      if (eventsBuilder_ == null) {
        ensureEventsIsMutable();
        events_.add(index, builderForValue.build());
        onChanged();
      } else {
        eventsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * `events` is where the client put all the events wrapped in `Event`.
     * As mentioned above, the request allows the client to push more than one event. Normally you want to batch
     * the events to optimize the network call. 
     * </pre>
     *
     * <code>repeated .odpf.raccoon.v1beta1.Event events = 3 [json_name = "events"];</code>
     */
    public Builder addAllEvents(
        java.lang.Iterable<? extends Event> values) {
      if (eventsBuilder_ == null) {
        ensureEventsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, events_);
        onChanged();
      } else {
        eventsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * `events` is where the client put all the events wrapped in `Event`.
     * As mentioned above, the request allows the client to push more than one event. Normally you want to batch
     * the events to optimize the network call. 
     * </pre>
     *
     * <code>repeated .odpf.raccoon.v1beta1.Event events = 3 [json_name = "events"];</code>
     */
    public Builder clearEvents() {
      if (eventsBuilder_ == null) {
        events_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
      } else {
        eventsBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * `events` is where the client put all the events wrapped in `Event`.
     * As mentioned above, the request allows the client to push more than one event. Normally you want to batch
     * the events to optimize the network call. 
     * </pre>
     *
     * <code>repeated .odpf.raccoon.v1beta1.Event events = 3 [json_name = "events"];</code>
     */
    public Builder removeEvents(int index) {
      if (eventsBuilder_ == null) {
        ensureEventsIsMutable();
        events_.remove(index);
        onChanged();
      } else {
        eventsBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * `events` is where the client put all the events wrapped in `Event`.
     * As mentioned above, the request allows the client to push more than one event. Normally you want to batch
     * the events to optimize the network call. 
     * </pre>
     *
     * <code>repeated .odpf.raccoon.v1beta1.Event events = 3 [json_name = "events"];</code>
     */
    public Event.Builder getEventsBuilder(
        int index) {
      return getEventsFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * `events` is where the client put all the events wrapped in `Event`.
     * As mentioned above, the request allows the client to push more than one event. Normally you want to batch
     * the events to optimize the network call. 
     * </pre>
     *
     * <code>repeated .odpf.raccoon.v1beta1.Event events = 3 [json_name = "events"];</code>
     */
    public EventOrBuilder getEventsOrBuilder(
        int index) {
      if (eventsBuilder_ == null) {
        return events_.get(index);  } else {
        return eventsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * `events` is where the client put all the events wrapped in `Event`.
     * As mentioned above, the request allows the client to push more than one event. Normally you want to batch
     * the events to optimize the network call. 
     * </pre>
     *
     * <code>repeated .odpf.raccoon.v1beta1.Event events = 3 [json_name = "events"];</code>
     */
    public java.util.List<? extends EventOrBuilder>
         getEventsOrBuilderList() {
      if (eventsBuilder_ != null) {
        return eventsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(events_);
      }
    }
    /**
     * <pre>
     * `events` is where the client put all the events wrapped in `Event`.
     * As mentioned above, the request allows the client to push more than one event. Normally you want to batch
     * the events to optimize the network call. 
     * </pre>
     *
     * <code>repeated .odpf.raccoon.v1beta1.Event events = 3 [json_name = "events"];</code>
     */
    public Event.Builder addEventsBuilder() {
      return getEventsFieldBuilder().addBuilder(
          Event.getDefaultInstance());
    }
    /**
     * <pre>
     * `events` is where the client put all the events wrapped in `Event`.
     * As mentioned above, the request allows the client to push more than one event. Normally you want to batch
     * the events to optimize the network call. 
     * </pre>
     *
     * <code>repeated .odpf.raccoon.v1beta1.Event events = 3 [json_name = "events"];</code>
     */
    public Event.Builder addEventsBuilder(
        int index) {
      return getEventsFieldBuilder().addBuilder(
          index, Event.getDefaultInstance());
    }
    /**
     * <pre>
     * `events` is where the client put all the events wrapped in `Event`.
     * As mentioned above, the request allows the client to push more than one event. Normally you want to batch
     * the events to optimize the network call. 
     * </pre>
     *
     * <code>repeated .odpf.raccoon.v1beta1.Event events = 3 [json_name = "events"];</code>
     */
    public java.util.List<Event.Builder>
         getEventsBuilderList() {
      return getEventsFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
            Event, Event.Builder, EventOrBuilder>
        getEventsFieldBuilder() {
      if (eventsBuilder_ == null) {
        eventsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
                Event, Event.Builder, EventOrBuilder>(
                events_,
                ((bitField0_ & 0x00000001) != 0),
                getParentForChildren(),
                isClean());
        events_ = null;
      }
      return eventsBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:odpf.raccoon.v1beta1.SendEventRequest)
  }

  // @@protoc_insertion_point(class_scope:odpf.raccoon.v1beta1.SendEventRequest)
  private static final SendEventRequest DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new SendEventRequest();
  }

  public static SendEventRequest getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<SendEventRequest>
      PARSER = new com.google.protobuf.AbstractParser<SendEventRequest>() {
    @java.lang.Override
    public SendEventRequest parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new SendEventRequest(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<SendEventRequest> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<SendEventRequest> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public SendEventRequest getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

